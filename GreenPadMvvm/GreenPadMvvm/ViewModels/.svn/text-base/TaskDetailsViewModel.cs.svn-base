using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using GreenPadMvvm.Data;
using System.Windows.Data;
using GreenPadMvvm.Commands;
using System.Windows.Input;

namespace GreenPadMvvm.ViewModels
{
    public class TaskDetailsViewModel : MediatorEnabledViewModel<ViewModelMessages>
    {
        #region Fields

        private Task _task;
        private MainWindowViewModel _mainWindow;
        private CollectionView _projects;
        
        private SaveTaskCommand _saveCommand;
        private CollectionView _priorities;

        #endregion Fields

        #region Constructor

        public TaskDetailsViewModel(Task task, MainWindowViewModel mainWindow)
        {
            using (ProjectRepository projectRepository = new ProjectRepository())
            {
                _projects = new CollectionView(projectRepository.GetAllProjects());
            }

            using (PriorityRepository priorityRepository = new PriorityRepository())
            {
                _priorities = new CollectionView(priorityRepository.GetAllPriorities());
            }

            _task = task;
            _mainWindow = mainWindow;

            TabDescription = "Task Details";
        }

        #endregion Constructor

        #region Combo box bindings

        public CollectionView Projects
        {
            get
            {
                return _projects;
            }
            private set
            {
                if (_projects != value)
                {
                    _projects = value;
                    base.OnPropertyChanged("Projects");
                }
            }
        }

        public CollectionView Priorities
        {
            get
            {
                return _priorities;
            }
        }

        #endregion

        #region Task fields

        public Project Project
        {
            get
            {
                return _task.Project;
            }
            set
            {
                if (value != _task.Project)
                {
                    _task.Project = value;
                    base.OnPropertyChanged("Project");
                }
            }
        }

        public string Description
        {
            get
            {
                return _task.Description;
            }
            set
            {
                if (value != _task.Description)
                {
                    _task.Description = value;
                    base.OnPropertyChanged("Description");
                }
            }
        }

        public string Notes
        {
            get
            {
                return _task.Notes;
            }
            set
            {
                if (value != _task.Notes)
                {
                    _task.Notes = value;
                    base.OnPropertyChanged("Notes");
                }
            }
        }

        public DateTime DueDate
        {
            get
            {
                return _task.DateDue;
            }
            set
            {
                if (value != _task.DateDue)
                {
                    _task.DateDue = value;
                    base.OnPropertyChanged("DueDate");
                }
            }
        }

        public Priority Priority
        {
            get
            {
                return _task.Priority;
            }
            set
            {
                if (value != _task.Priority)
                {
                    _task.Priority = value;
                    base.OnPropertyChanged("Priority");
                }
            }
        }

        #endregion Task fields

        public Task Task
        {
            get
            {
                return _task;
            }
        }

        #region Save command

        public ICommand SaveCommand
        {
            get
            {
                if (_saveCommand == null)
                {
                    _saveCommand = new SaveTaskCommand(_task, _mainWindow);
                }
                return _saveCommand;
            }
        }

        #endregion
    }
}
